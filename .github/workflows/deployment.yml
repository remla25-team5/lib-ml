name: Lib-ml Deployment

on: push
  # workflow_dispatch:
  #   inputs:
  #     bump_level:
  #       description: 'Specify the type of version bump for the new release.'
  #       required: false
  #       type: choice 
  #       options:   
  #         - patch
  #         - minor
  #         - major
  #       default: 'patch' 

jobs:
  delivery:
    name: Deployment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # - name: Create empty commit for stable release
      #   run: |
      #     git commit --allow-empty -m "Empty commit for stable release [skip ci]"
      #     git push
      #     COMMIT_SHA=$(git rev-parse HEAD)
      #     echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
      #     echo "Created release commit with SHA: $COMMIT_SHA"

      - name: Bump stable version and push tag
        id: bump_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # release_branches: main
          dry_run: true
          release_branches: ${{ github.ref_name }}
          pre_release_branches: 'NONE'
          # default_bump: ${{ inputs.bump_level }}
          default_bump: patch
          tag_prefix: v
      
      - name: Create release commit and tag
        id: create_release
        run: |
          NEW_TAG=${{ steps.bump_version.outputs.new_tag }}
          git commit --allow-empty -m "Release ${NEW_TAG} [skip ci]"
          git tag $NEW_TAG
          git push origin HEAD --tags
          echo "new_tag=${NEW_TAG}" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Build wheel / sdist
        run: |
          python -m pip install --upgrade pip build  
          python -m build  
        
      - name: Get Artifact Filenames
        id: get_filenames
        run: |
          WHEEL_FILE=$(ls dist/*.whl | head -n 1)
          WHEEL_FILENAME=$(basename $WHEEL_FILE)
          echo "Found wheel file: $WHEEL_FILENAME"
          echo "wheel_filename=$WHEEL_FILENAME" >> $GITHUB_ENV

      - name: Create GitHub Release Page Entry
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.bump_version.outputs.new_tag  }}
          name: Release ${{ steps.bump_version.outputs.new_tag}}
          body: |
            Release of version ${{ steps.bump_version.outputs.new_tag }} for lib-ml.
    
             **Installation:**
            Download the `.whl` file from the assets below and install using pip:
            ```bash
            pip install https://github.com/${{ github.repository }}/releases/download/${{ steps.bump_version.outputs.new_tag }}/${{ env.wheel_filename }}
            ```
            or add it to your requirements.txt
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create empty commit for next pre-release
        run: |
          git pull
          git commit --allow-empty -m "Empty commit for next pre-release"
          git push

      # - name: Add new pre release
      #   uses: mathieudutour/github-tag-action@v6.2
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     release_branches: 'NONE'
      #     pre_release_branches: main
      #     default_prerelease_bump: prerelease
      #     append_to_pre_release_tag: pre
      #     tag_prefix: v